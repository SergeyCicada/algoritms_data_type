"""Стек - структура данных которая поддерживает занесение (вставка - push(e)) и извлечение (выведение из списка головного
первого элемента, чтение и удаление - pop())

push(e) - добавить элемент на вершину стека
pop() - получить и удалить элемент с вершины стека

Более совершенные разновидности стеков могут поодерживать дополнительные операции: проверку наличия элементов или
получение их текущего количества.

Такая обработка данных известна под названием LIFO (Last-In, First-Out, "последним вошел, первым вышел"); мы можем
удалить только верхний элемент, который был добавлен последним
"""

"Стек вызовов функций"


def greet2(name):
    print(f"How are you {name}?")


def bye():
    print("Ok bye")


def greet(name):
    print(f"Hello {name}!")

    greet2(name)
    bye()


greet("Maggie")

"""
1. Вызов greet("Maggie")
-сначала компьютер выделяет блок памяти для этого вызова функции. Это память используется.
Каждый раз когда вы вызываете функцию, ПК сохраняет в памяти значения всех переменных этого вызова.

:Hello maggie!

2. Второй вызов greet2("Maggie") + 1 блок в памяти

: How are you, Maggie? - передача управления greet и -1 блок стека

и greet2 передает управление greet и извлекается из стека
!Когда вы вызываете функцию из другой функции, ызывающая функция приостанавливается в частично завершенном состоянии.
Все значения переменных вызывающей функций остаются в памяти.

3. 3 вызов bye(): +1 блок стека

:Ok, bye - -1 блок стека

Больше нечего делать - 1 блок стека greet
"""

"""СТЕК ВЫЗОВОВ С РЕКУРСИЕЙ

Функция нахождения факториала
factorial(5) = 5! = 5*4*3*2*1
"""

def fact(x):
    if x == 1:
        return 1
    else:
        return x * fact(x-1)


"""Каждый вызов создаёт свою копию x, обращаться к переменной x другой функции невозмодно

Минусы рекурсии. Много вызовов = много занимаемой памяти"""